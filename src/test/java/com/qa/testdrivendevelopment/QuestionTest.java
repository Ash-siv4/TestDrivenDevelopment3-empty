package com.qa.testdrivendevelopment;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Test file for Questions Class.
 * 
 * The first questions have been completed for you, 
 * there are 10 other questions.
 * 
 * Run this file to see how well you are doing.
 * 
 * DO NOT EDIT THIS FILE!
 * 
 * An extra test (which is secret) will run on these tests after submission
 * So it is not recommended that you "hard code" solutions.
 * i.e. if (input.equals("John")) return "Hi John"
 * 
 */
public class QuestionTest {

	private Questions questions = new Questions();	
	
	@Test
	public void greetingExampleTest() {
		assertEquals("Hi John", questions.greetingExample("John"));
		assertEquals("Hi Matt", questions.greetingExample("Matt"));
		assertEquals("Hi Angelica", questions.greetingExample("Angelica"));		
	}
		
	@Test
	public void multiplyTest() {
		assertArrayEquals(new int[][] {{0,0,0},{0,1,2}}, questions.multiply(3, 2));
		assertArrayEquals(new int[][] {{0,0}}, questions.multiply(2, 1));
		assertArrayEquals(new int[][] {{0,0,0},{0,1,2},{0,2,4},{0,3,6}}, questions.multiply(3, 4));
	}
	
	@Test
	public void sortAlphabeticallyTest() {
		assertArrayEquals(new String[]{"bag","bark","car","dog"}, new String[]{"bag","bark","car","dog"});
		assertArrayEquals(new String[] {"bag","car","dog"}, questions.sortAlphabetically(new String[]{"bag","car","dog"}));
		assertArrayEquals(new String[] {"bag","car","dog"}, questions.sortAlphabetically(new String[]{"dog","car","bag"}));
		assertArrayEquals(new String[] {"bag","bark","car","dog"}, questions.sortAlphabetically(new String[]{"car","bark","bag","dog"}));	
	}
	
	@Test
	public void aPlusTest() {
		assertEquals(6170, questions.aPlus(5));
		assertEquals(11106, questions.aPlus(9));
	}
	
	@Test
	public void oddNumTest() {
		assertEquals("1,3,5", questions.oddNum("1,2,3,4,5"));
		assertNull(questions.oddNum("2,4,6,8"));
		assertEquals("23,57", questions.oddNum("23,48,52,57"));
	}
	
	@Test
	public void longStringTest() {
		assertEquals("hello", questions.longString("hi", "hello"));
		assertEquals("three", questions.longString("three", "two"));
		assertEquals("three hello", questions.longString("three", "hello"));
	}
	
	@Test
	public void emailTest() {
		assertEquals("john", questions.email("john@google.com", "person"));
		assertEquals("microsoft", questions.email("jane@Microsoft.com", "company"));
		assertEquals("dave", questions.email("Dave@amazon.com", "person"));
	}
	
	@Test
	public void fibonacciTest() {
		assertEquals(0, questions.fibonacci(0));
		assertEquals(1, questions.fibonacci(1));
		assertEquals(1, questions.fibonacci(2));
		assertEquals(2, questions.fibonacci(3));
		assertEquals(3, questions.fibonacci(4));
		assertEquals(5, questions.fibonacci(5));
		assertEquals(21, questions.fibonacci(8));		
	}
	
	@Test
	public void oddLettersTest() {
		assertEquals("pne", questions.oddLetters("Sponge"));
		assertEquals("i", questions.oddLetters("hi"));
		assertEquals("Helloworld", questions.oddLetters("0H1e2l3l4o5w6o7r8l9d"));
	}
	
	@Test
	public void chickenAndRabbitsTest() {
		assertEquals((Integer) 23, questions.chickenAndRabbits(35, 94));
		assertEquals((Integer) 1, questions.chickenAndRabbits(2, 6));
		assertNull(questions.chickenAndRabbits(12, 63));
	}
	
	@Test
	public void validCardTest() {
		assertTrue(questions.validCard("4012-3456-7890-1234"));
		assertFalse(questions.validCard("0123-4567-8901-2345"));
		assertFalse(questions.validCard("401234567890123"));
		assertFalse(questions.validCard("4012 3456 7890 1234"));
		assertFalse(questions.validCard("4444-0123-4567-8901"));
		assertTrue(questions.validCard("4012345678901234"));
	}
}